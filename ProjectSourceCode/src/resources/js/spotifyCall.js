//module.exports.getTopArtists = async function getTopArtists(savedToken){
//    const result = await fetch("https://api.spotify.com/v1/me/top/artists", {
//        method: "GET",
//        headers: { 
//            'Authorization': 'Bearer ' + savedToken 
//        }
//    });
//
//    return await result.json();
//}

module.exports.getTopTracks = async function getTopTracks(savedToken, time_range){

    let submitRange = ""
    if(time_range != undefined){
        submitRange = "?time_range=" + time_range;
    }
    

    const result = await fetch(`https://api.spotify.com/v1/me/top/tracks${submitRange}`, {
        method: "GET",
        headers: { 
            'Authorization': 'Bearer ' + savedToken 
        }
    });

    return await result.json();
}

module.exports.getTopArtists = async function getTopArtists(savedToken, time_range){

    let submitRange = ""
    if(time_range != undefined){
        submitRange = "?time_range=" + time_range;
    }

    const result = await fetch(`https://api.spotify.com/v1/me/top/artists${submitRange}`, {
        method: "GET",
        headers: { 
            'Authorization': 'Bearer ' + savedToken 
        }
    });

    return await result.json();
}

module.exports.getTrackRecommendation = async function getTrackRecommendation(savedToken, inputs){


    //NEED BETTER STRING FILTERING FOR INPUTS; 

    let artists = "seed_artists="
    let tracks = "seed_tracks="
    let genres = "seed_genres="
    let seperator = "%2C"

    let finalQuery = genres

    for(let i = 0; i < inputs.length; i++){
        if(i == 0){
            finalQuery += inputs[i]
        }
        else{
            finalQuery += (seperator + inputs[i])
        }
    }

    const result = await fetch(`https://api.spotify.com/v1/recommendations?${finalQuery}`, {
        method: "GET",
        headers: { 
            'Authorization': 'Bearer ' + savedToken 
        }
    });

    return await result.json();
}


module.exports.createRecommendedPlaylist = async function createRecommendedPlaylist(savedToken, recommendedTracks, genreInput){

    console.log("TESTTESTTEST")

    //get current user's profile:
    const user = fetch(`https://api.spotify.com/v1/me`, {
        method: "GET",
        headers: { 
            'Authorization': 'Bearer ' + savedToken 
        }
    });

    const userID = await user.json().id;
    console.log("USERID")
    console.log(userID)

    //pass spotify user ID, and genreInput (genre indicators) to create playlist function:
    const createdPlaylist = fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {
        method: "POST",
        headers: { 
            'Authorization': 'Bearer ' + savedToken,
            'Content-Type': 'application/json' 
        },
        data: {
            "name":`${genreInput} Playlist`,
            "description":`${genreInput} playlist generated by moodtune.`,
            "public":false
        }
    });

    console.log("TEST2")

    //createdPlaylist will need to be populated using recommendedTracks
        //"id" contains object URL for playlist object

    const playlist_id = await createdPlaylist.json().id;

    //recommendedTracks is a list of the URIs of all of the tracks that will be added to created playlist
    const populatedPlaylist = fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {
        method: "POST",
        headers: { 
            'Authorization': 'Bearer ' + savedToken 
        },
        data: {
            "uris": [recommendedTracks]
        }
    });

    console.log("TEST3")


    return await populatedPlaylist.json();
}